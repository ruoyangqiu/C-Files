



#include<stdio.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>


int CURRENT = 1;
int counter[4] = { 0, 0, 0, 0 };
int count = 0;

pthread_t threads[4];

pthread_mutex_t lock;

pthread_cond_t cond;


void *myTurn(void *arg)
{
	
	int mtid = (long)(arg);
  
pthread_mutex_lock(&lock);
if(mtid == CURRENT ){
  int i;
  if(counter[mtid - 1] < 10){
    printf("My turn! %d\n", mtid);
     count ++;
  }
  counter[mtid - 1] ++;
    
    
  CURRENT++;
	if (CURRENT == 5) {
		CURRENT = 1;
  }	
} else {
  if(counter[mtid - 1] < 10){
    printf("Not my turn %d\n", mtid);
  }  
}
  
pthread_mutex_unlock(&lock);
  
  
return NULL;
}

int main()
{
	pthread_mutex_init(&lock, NULL);
  int i;
  
 
  int index = 0;
  while(count < 40) {
    
      
  
    pthread_create(&threads[index],  NULL, myTurn, (void*)(size_t)(index + 1));
      
    pthread_join(threads[index], NULL);
     
    index ++;
    if(index == 4 )
    {
      index = 0;
      
    }
    
  }
  printf("Total: %d\n", count);
	pthread_mutex_destroy(&lock);
	exit(EXIT_SUCCESS);
}
